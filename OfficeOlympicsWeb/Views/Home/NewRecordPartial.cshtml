@model NewRecordViewModel

<form id="newRecordForm">
    @Html.HiddenFor(model => model.Event.EventId)
    @Html.HiddenFor(model => model.Event.EventName)
    @Html.HiddenFor(model => model.Event.EventTypeId)
    <div class="form-group">
        @Html.LabelFor(model => model.Record.Competitor)
        @Html.DropDownListFor(model => model.Record.Competitor.CompetitorId, Model.Competitors, "-- Select a Competitor --", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Record.Competitor.CompetitorId)
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Record.Score)
        @Html.TextBoxFor(model => model.Record.Score.Score, new { autocomplete = "off", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Record.Score.Score)
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Record.Witness1)
        @Html.DropDownListFor(model => model.Record.Witness1.CompetitorId, Model.Competitors, "-- Select a Witness --", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Record.Witness1.CompetitorId)
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Record.Witness2)
        @Html.DropDownListFor(model => model.Record.Witness2.CompetitorId, Model.Competitors, "-- Select a Witness --", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Record.Witness2.CompetitorId)
    </div>
    <div class="btn-group">
        <button type="submit" class="btn btn-success">Save</button>
        <button id="cancelButton" type="button" class="btn btn-default">Cancel</button>
    </div>
</form>